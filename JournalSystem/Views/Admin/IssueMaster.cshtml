@model BAL.Models.IssueMasterModel
@{
    ViewBag.Title = "Issue Master";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="crumbs">
    <ul id="breadcrumbs" class="breadcrumb">
        <li><i class="icon-home"></i><a href="@Url.Action("Dashboard","Admin")">Dashboard</a> </li>
        <li class="current"><a href="pages" title="">Issue Master</a> </li>
    </ul>

</div>
<div class="page-header">
    <div class="page-title">
        <h3>
            Manage Issues
        </h3>

    </div>

</div>
<div class="row">

    <div class="col-md-12">
        <div class="widget box">
            <div class="widget-header">
                <h4>Add Issue</h4>
            </div>
            <div class="widget-content">

               
                <form class="form-horizontal" id="myForm" method="post">
                    <input type="hidden" id="hdID" value="0" />
                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.Label("Select Journal")
                        </label>
                        <div class="col-md-9">

                            @Html.DropDownList("JournalId", (IEnumerable<SelectListItem>)ViewBag.Journals, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.Volume) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.Volume, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.Issue) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.Issue, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.Year) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.Year, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.Description) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.Description, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.Label("Select Type")
                        </label>
                        <div class="col-md-4">
                            @Html.DropDownList("ddlType",new List<SelectListItem> { new SelectListItem { Text="Archive",Value="0"},new SelectListItem { Text="Current",Value="1"},new SelectListItem { Text="Is Ahead",Value="2"} },new { @class="form-control"})
                        </div>
                    </div>
                   
                    <div class="form-actions">

                        <input type="button" ID="saveButton" value="Submit" class="btn btn-primary  col-md-offset-5" />
                        <input type="reset" ID="resetButton" onclick="ResetForm()" value="Clear" class="btn btn-inverse " />
                    </div>


                </form>



            </div>
        </div>
    </div>

</div>
<div class="row">
    <div class="col-md-12">
        <div class="widget box">
            <div class="widget-header">
                <h4>All Issues List</h4>
            </div>
            <div class="widget-content">
                <div class="tabbable tabbable-custom">
                    <ul class="nav nav-tabs">
                        <li class="active">
                            <a href="#tab_1_1" data-toggle="tab">All  Archive Issues</a>
                        </li>
                        <li>
                            <a href="#tab_1_2" data-toggle="tab">All Current Issues</a>
                        </li>
                        <li>
                            <a href="#tab_1_3" data-toggle="tab">All Ahead of Print Issues</a>
                        </li>

                    </ul>
                    <div class="tab-content">
                        <div class="tab-pane active" id="tab_1_1">
                            <table id="demoGrid" class="table table-striped table-bordered dt-responsive nowrap" cellspacing="0">
                                <thead>
                                    <tr>
                                        <th>Id</th>
                                        <th>JournalId</th>
                                        <th>Volume</th>
                                        <th>Issue</th>
                                        <th>Year</th>
                                        <th>Description</th>
                                        <th>IsCurrent</th>
                                        <th>CreatedOn</th>
                                        <th>Edit</th>
                                        <th>Delete</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                        <div class="tab-pane" id="tab_1_2">
                            <table id="currentIssueGrid" class="table table-striped table-bordered dt-responsive nowrap" cellspacing="0">
                                <thead>
                                    <tr>
                                        <th>Id</th>
                                        <th>JournalId</th>
                                        <th>Volume</th>
                                        <th>Issue</th>
                                        <th>Year</th>
                                        <th>Description</th>

                                        <th>IsCurrent</th>
                                        <th>CreatedOn</th>
                                        <th>Edit</th>
                                        <th>Delete</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>
                        <div class="tab-pane" id="tab_1_3">
                            <table id="aheadIssueGrid" class="table table-striped table-bordered dt-responsive nowrap" cellspacing="0">
                                <thead>
                                    <tr>
                                        <th>Id</th>
                                        <th>JournalId</th>
                                        <th>Volume</th>
                                        <th>Issue</th>
                                        <th>Year</th>
                                        <th>Description</th>

                                        <th>IsAhead</th>
                                        <th>CreatedOn</th>
                                        <th>Edit</th>
                                        <th>Delete</th>
                                    </tr>
                                </thead>
                            </table>
                        </div>

                    </div>
                </div>

                

            </div>
        </div>
    </div>
</div>

@section scripts{
    <link href="@Url.Content("~/Content/DataTables/css/jquery.dataTables.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/DataTables/jquery.dataTables.js")"></script>
    <script src="@Url.Content("~/Scripts/tinymce/tinymce.js")"></script>
    <script>
    $('#saveButton').click(function () {
        if ($("#myForm").valid()) {

            var formData = $('#myForm'); // You need to use standard javascript object here
            
         
                    $.ajax({
                        url: '@Url.Action("IssueMaster", "Admin")',
                        type: "POST",
                        data: formData.serialize() + "&action=" + $("#saveButton").val() + "&id="+$("#hdID").val()+"" ,
                        success: function (data) {
                            new Noty({
                                text: data,
                                type: 'success',
                                theme: 'metroui',
                                timeout: 2000
                            }).show();
                            NProgress.done();
                            $("#myForm")[0].reset();
                            oTable = $('#demoGrid').DataTable();
                            oTable.draw();
                            bTable = $('#currentIssueGrid').DataTable();
                            bTable.draw();
                            cTable = $('#aheadIssueGrid').DataTable();
                            cTable.draw();

                            $("#saveButton").val("Submit");
                        },
                        error: function (jqXHR) {
                            new Noty({
                                text: jqXHR.status,
                                type: 'error',
                                theme: 'metroui',
                                timeout: 2000
                            }).show();
                        }
                    });
                }

            else {
                new Noty({
                    text: 'Please fill form',
                    type: 'error',
                    theme: 'metroui',
                    timeout: 2000
                }).show();
            }
        });
    $("#myForm").validate({
        rules: {

             
            Volume: {
                required: true,
                number: true
            },
            Issue: {
                required: true,
                number: true
            },
            Year: {
                required: true,
                number: true
            },
            Description: "required"


        },
        messages: {
            Volume: "Please Enter Volume",
            Issue: "Please enter Issue",
            Year:"Please enter Year",
            Description:"Please enter description"

        },
        errorPlacement: function (error, element) {
            // Add the `help-block` class to the error element
            error.addClass("help-block");

            if (element.prop("type") === "checkbox") {
                error.insertAfter(element.parent("label"));
            } else {
                error.insertAfter(element);
            }
        },
        highlight: function (element, errorClass, validClass) {
            $(element).parents(".col-md-9").addClass("has-error").removeClass("has-success");
        },
        unhighlight: function (element, errorClass, validClass) {
            $(element).parents(".col-md-9").addClass("has-success").removeClass("has-error");
        }

    });





    </script>

    <script>
        $(document).ready(function () {

            $("#SubCategoryList").select2();
        $("#demoGrid").DataTable({
            "processing": true, // for show progress bar
            "serverSide": true, // for process server side
            "filter": true, // this is for disable filter (search box)
            "orderMulti": false, // for disable multiple column at once
            "search": {
                "caseInsensitive": false
            },
            "pageLength": 10,
            "ajax": {
                "url": '@Url.Action("GetAllIssues", "Admin")',
                "type": "POST",
                "datatype": "json"
            },
            "columnDefs":
            [{
                "targets": [0],
                "visible": true,
                "searchable": false
            },



            {
                "targets": [8],
                "searchable": false,
                "orderable": false
            },
            {
                "targets": [9],
                "searchable": false,
                "orderable": false
            }],

            "columns": [
                { "data": "Id", "name": "Id", "autoWidth": true },
                { "data": "JournalId", "name": "JournalId", "autoWidth": true },
                { "data": "Volume", "name": "Volume", "autoWidth": true },
                { "data": "Issue", "name": "Issue", "autoWidth": true },
                { "data": "Year", "name": "Year", "autoWidth": true },
                { "data": "Description", "name": "Description", "autoWidth": true },
                {
                    "data": "IsCurrent", "name": "IsCurrent", "autoWidth": true,
                    "render": function (value) {
                        if (value == true) {
                            return '<label class="label label-success">Current</label>';
                        }

                        else {
                            return '<label class="label label-warning">Archive</label>';
                        }
                    }
                },
                {
                    "data": "CreatedOn", "name": "CreatedOn", "autoWidth": true,
                    "render": function (value) {
                        if (value === null) return "";
                        var pattern = /Date\(([^)]+)\)/;
                        var results = pattern.exec(value);
                        var dt = new Date(parseFloat(results[1]));
                        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
                    }
                },
                {
                    "render": function (data, type, row) {
                        return '<a class="btn btn-info" onclick=EditFunction("'+row.Id+'"); >Edit</a>';
                    }
                },
                {
                    data: null, render: function (data, type, row) {
                        return "<a href='#' class='btn btn-danger' onclick=DeleteData('" + row.Id + "'); >Delete</a>";
                    }
                },
            ]

            });
            $("#currentIssueGrid").DataTable({
            "processing": true, // for show progress bar
            "serverSide": true, // for process server side
            "filter": true, // this is for disable filter (search box)
            "orderMulti": false, // for disable multiple column at once
            "search": {
                "caseInsensitive": false
            },
            "pageLength": 10,
            "ajax": {
                "url": '@Url.Action("GetCurrentIssues", "Admin")',
                "type": "POST",
                "datatype": "json"
            },
            "columnDefs":
            [{
                "targets": [0],
                "visible": true,
                "searchable": false
                    },
                    {
                        "targets": [8],
                        "searchable": false,
                        "orderable": false
                    },
                        {
                            "targets": [9],
                            "searchable": false,
                            "orderable": false
                        }
                    ],

            "columns": [
                { "data": "Id", "name": "Id", "autoWidth": true },
                { "data": "JournalId", "name": "JournalId", "autoWidth": true },
                { "data": "Volume", "name": "Volume", "autoWidth": true },
                { "data": "Issue", "name": "Issue", "autoWidth": true },
                { "data": "Year", "name": "Year", "autoWidth": true },
                { "data": "Description", "name": "Description", "autoWidth": true },
                {
                    "data": "IsCurrent", "name": "IsCurrent", "autoWidth": true,
                    "render": function (value) {
                        if (value == true) {
                            return '<label class="label label-success">Current</label>';
                        }

                        else {
                            return '<label class="label label-warning">Archive</label>';
                        }
                    }
                },
                {
                    "data": "CreatedOn", "name": "CreatedOn", "autoWidth": true,
                    "render": function (value) {
                        if (value === null) return "";
                        var pattern = /Date\(([^)]+)\)/;
                        var results = pattern.exec(value);
                        var dt = new Date(parseFloat(results[1]));
                        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
                    }
                },
                {
                    "render": function (data, type, row) {
                        return '<a class="btn btn-info" onclick=EditFunction("' + row.Id + '"); >Edit</a>';
                    }
                },
                {
                    data: null, render: function (data, type, row) {
                        return "<a href='#' class='btn btn-danger' onclick=DeleteData('" + row.Id + "'); >Delete</a>";
                    }
                },
                
            ]

            });
            $("#aheadIssueGrid").DataTable({
            "processing": true, // for show progress bar
            "serverSide": true, // for process server side
            "filter": true, // this is for disable filter (search box)
            "orderMulti": false, // for disable multiple column at once
            "search": {
                "caseInsensitive": false
            },
            "pageLength": 10,
            "ajax": {
                "url": '@Url.Action("GetAheadIssues", "Admin")',
                "type": "POST",
                "datatype": "json"
            },
            "columnDefs":
            [{
                "targets": [0],
                "visible": true,
                "searchable": false
                    },
                    {
                        "targets": [8],
                        "searchable": false,
                        "orderable": false
                    },
                    {
                        "targets": [9],
                        "searchable": false,
                        "orderable": false
                    }
                    ],

            "columns": [
                { "data": "Id", "name": "Id", "autoWidth": true },
                { "data": "JournalId", "name": "JournalId", "autoWidth": true },
                { "data": "Volume", "name": "Volume", "autoWidth": true },
                { "data": "Issue", "name": "Issue", "autoWidth": true },
                { "data": "Year", "name": "Year", "autoWidth": true },
                { "data": "Description", "name": "Description", "autoWidth": true },
                {
                    "data": "IsAhead", "name": "IsAhead", "autoWidth": true,
                    "render": function (value) {
                        if (value == true) {
                            return '<label class="label label-success">Ahead</label>';
                        }

                        else {
                            return '<label class="label label-warning">Archive</label>';
                        }
                    }
                },
                {
                    "data": "CreatedOn", "name": "CreatedOn", "autoWidth": true,
                    "render": function (value) {
                        if (value === null) return "";
                        var pattern = /Date\(([^)]+)\)/;
                        var results = pattern.exec(value);
                        var dt = new Date(parseFloat(results[1]));
                        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
                    }
                },
                {
                    "render": function (data, type, row) {
                        return '<a class="btn btn-info" onclick=EditFunction("' + row.Id + '"); >Edit</a>';
                    }
                },
                {
                    data: null, render: function (data, type, row) {
                        return "<a href='#' class='btn btn-danger' onclick=DeleteData('" + row.Id + "'); >Delete</a>";
                    }
                },
                
            ]

            });
        });
    </script>
    <script>
        function ResetForm() {
            $("#myForm")[0].reset();
            $("#saveButton").val("Submit");
        }

        function DeleteData(ID) {
            if (confirm("Are you sure you want to delete ...?")) {
                Delete(ID);
            }
            else {
                return false;
            }
        }


        function Delete(ID) {
            var url = '@Url.Action("DeleteIssue", "Admin")';
            $.post(url, { id: ID }, function (data) {
                if (data == "Ok") {
                    new Noty({
                        text: 'Issue Removed Successfully',
                        type: 'success',
                        theme: 'metroui',
                        timeout: 2000
                    }).show();
                    oTable = $('#demoGrid').DataTable();
                    oTable.draw();
                }
                else if (data == "No") {
                    new Noty({
                        text: data,
                        type: 'error',
                        theme: 'metroui',
                        timeout: 2000
                    }).show();
                    oTable = $('#demoGrid').DataTable();
                    oTable.draw();
                }
                else {
                    new Noty({
                        text: data,
                        type: 'warning',
                        theme: 'metroui',
                        timeout: 2000
                    }).show();
                }
            });
        }

        function EditFunction(id) {
        $.ajax({
            data: { id: id },
            url: '@Url.Action("GetIssue", "Admin")',
            success: function (data) {
                 
                $("#JournalId").val(data[0].JournalId);
                $("#Volume").val(data[0].Volume);
                $("#Issue").val(data[0].Issue);
                $("#Year").val(data[0].Year);
                $("#Description").val(data[0].Description);
                $("#hdID").val(id);
                $("#saveButton").val("Update");
                $("#Volume").focus();
                var isCurrent = data[0].IsCurrent;
                var isAhead = data[0].IsAhead;
                if (isCurrent) {
                    $("#ddlType").val("1");
                }
                else if (isAhead) {
                    $("#ddlType").val("2");
                }
                else {
                    $("#ddlType").val("0");
                }
                 
            }
        });
        }
       
    </script>
    <script type="text/javascript">
        // Initialize your tinyMCE Editor with your preferred options
        tinymce.init({
            selector: 'textarea',
            height: 200,
            theme: 'modern',
            plugins: 'print preview fullpage searchreplace autolink directionality  visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists textcolor wordcount   imagetools contextmenu colorpicker textpattern help',
            toolbar1: 'formatselect | bold italic strikethrough forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat'



        });
    </script>


}
