@model BAL.Models.UserMasterModel
@{
    ViewBag.Title = "Users Master";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="crumbs">
    <ul id="breadcrumbs" class="breadcrumb">
        <li><i class="icon-home"></i><a href="@Url.Action("Dashboard","Admin")">Dashboard</a> </li>
        <li class="current"><a href="pages" title="">Add User</a> </li>
    </ul>

</div>
<div class="page-header">
    <div class="page-title">
        <h3>
            Manage Users
        </h3>

    </div>

</div>
<div class="row">

    <div class="col-md-12">
        <div class="widget box">
            <div class="widget-header">
                <h4>Add User</h4>
            </div>
            <div class="widget-content">

                <input type="hidden" id="hdID" value="0" />
                <form enctype="multipart/form-data" class="form-horizontal" id="myForm" method="post">

                    @Html.AntiForgeryToken()



                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.FirstName) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.FirstName, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.LastName) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.LastName, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.Email) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.Email, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.Password) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.PasswordFor(x => x.Password, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">Is Super Admin </label>
                        <div class="col-md-9">
                            <label class="checkbox">
                                @Html.CheckBoxFor(x => x.IsSuperAdmin)
                            </label>

                        </div>
                    </div>
                    <div class="form-actions">

                        <input type="button" ID="saveButton" value="Submit" class="btn btn-primary  col-md-offset-5" />
                        <input type="reset" ID="resetButton" onclick="ResetForm()" value="Clear" class="btn btn-inverse " />
                    </div>


                </form>



            </div>
        </div>
    </div>

</div>
<div class="row">
    <div class="col-md-12">
        <div class="widget box">
            <div class="widget-header">
                <h4>Users List</h4>
            </div>
            <div class="widget-content">
                <table id="demoGrid" class="table table-striped table-bordered dt-responsive nowrap" cellspacing="0">
                    <thead>
                        <tr>
                            <th>UserId</th>
                            <th>FirstName</th>
                            <th>LastName</th>
                            <th>Email</th>
                            <th>IsSuperAdmin</th>
                            <th>CreatedOn</th>
                            <th>Edit</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                </table>

            </div>
        </div>
    </div>
</div>

@section scripts{
    <link href="@Url.Content("~/Content/DataTables/css/jquery.dataTables.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/DataTables/jquery.dataTables.js")"></script>

    <script>
$('#saveButton').click(function () {
if ($("#myForm").valid()) {
NProgress.start();
var actionTy = $("#saveButton").val();
var ids = $("#hdID").val();
var formData = $("#myForm");
$.ajax({
  url: '@Url.Action("AddUser", "Admin")',
  type: "POST",
  data: formData.serialize() ,
  success: function (data) {
      new Noty({
          text: data,
          type: 'success',
          theme: 'metroui',
          timeout: 2000
      }).show();
      NProgress.done();
      $("#myForm")[0].reset();
      oTable = $('#demoGrid').DataTable();
      oTable.draw();
      $("#saveButton").val("Submit");
  },
  error: function (jqXHR) {
      new Noty({
          text: jqXHR.status + ":" + jqXHR.statusText,
          type: 'error',
          theme: 'metroui',
          timeout: 2000
      }).show();
  }
});

}
else {
new Noty({
text: 'Please fill form',
type: 'error',
theme: 'metroui',
timeout: 2000
}).show();
}
});
$("#myForm").validate({
rules: {

FirstName: "required",
Email: {
required: true,
email:true
},
Password: {
required: true,
minlength: 5
}
},
messages: {
FirstName: "Please Enter first name",
Email: "Please enter email",
Password: {
required: "Please provide a password",
minlength: "Your password must be at least 5 characters long"
}

},
errorPlacement: function (error, element) {
// Add the `help-block` class to the error element
error.addClass("help-block");

if (element.prop("type") === "checkbox") {
error.insertAfter(element.parent("label"));
} else {
error.insertAfter(element);
}
},
highlight: function (element, errorClass, validClass) {
$(element).parents(".col-md-9").addClass("has-error").removeClass("has-success");
},
unhighlight: function (element, errorClass, validClass) {
$(element).parents(".col-md-9").addClass("has-success").removeClass("has-error");
}

});





    </script>

    <script>
$(document).ready(function () {

$("#SubCategoryList").select2();
$("#demoGrid").DataTable({
"processing": true, // for show progress bar
"serverSide": true, // for process server side
"filter": true, // this is for disable filter (search box)
"orderMulti": false, // for disable multiple column at once
"search": {
"caseInsensitive": false
},
"pageLength": 10,
"ajax": {
"url": '@Url.Action("GetAllUsers", "Admin")',
"type": "POST",
"datatype": "json"
},
"columnDefs":
[{
"targets": [0],
"visible": true,
"searchable": false
},
{
"targets": [6],
"searchable": false,
"orderable": false
},
{
"targets": [7],
"searchable": false,
"orderable": false
}],

"columns": [
{ "data": "UserId", "name": "UserId", "autoWidth": true },
{ "data": "FirstName", "name": "FirstName", "autoWidth": true },
{ "data": "LastName", "name": "LastName", "autoWidth": true },
{ "data": "Email", "name": "Email", "autoWidth": true },
{ "data": "IsSuperAdmin", "name": "IsSuperAdmin", "autoWidth": true },
{
"data": "CreatedOn", "name": "CreatedOn", "autoWidth": true,
"render": function (value) {
  if (value === null) return "";
  var pattern = /Date\(([^)]+)\)/;
  var results = pattern.exec(value);
  var dt = new Date(parseFloat(results[1]));
  return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
}
},
{
"render": function (data, type, row) {
  return '<a class="btn btn-info" onclick=EditFunction("'+row.Id+'"); >Edit</a>';
}
},
{
data: null, render: function (data, type, row) {
  return "<a href='#' class='btn btn-danger' onclick=DeleteData('" + row.UserId + "'); >Delete</a>";
}
},
]

});
});
    </script>
    <script>
        function ResetForm() {
            $("#myForm")[0].reset();
            $("#saveButton").val("Submit");
        }

        function DeleteData(ID) {
            if (confirm("Are you sure you want to delete ...?")) {
                Delete(ID);
            }
            else {
                return false;
            }
        }


        function Delete(ID) {
            var url = '@Url.Action("DeleteUser", "Admin")';
            $.post(url, { id: ID }, function (data) {
                if (data == "true") {
                    new Noty({
                        text: 'User Removed Successfully',
                        type: 'success',
                        theme: 'metroui',
                        timeout: 2000
                    }).show();
                    oTable = $('#demoGrid').DataTable();
                    oTable.draw();
                }
                else if (data == "No") {
                    new Noty({
                        text: 'Some Error Occured',
                        type: 'error',
                        theme: 'metroui',
                        timeout: 2000
                    }).show();
                }
                else {
                    new Noty({
                        text: data,
                        type: 'warning',
                        theme: 'metroui',
                        timeout: 2000
                    }).show();
                }
            });
        }

        function EditFunction(id) {
        $.ajax({
            data: { id: id },
            url: '@Url.Action("", "Account")',
            success: function (data) {
                $("#SKU").val(data.SKU);
                $("#ItemName").val(data.ItemName);

                $("#hdID").val(id);
                $('#SubCategoryList').select2('data', { id: data.SubCategory, text: data.SubCategoryName });
                tinyMCE.get('ShortDescription').setContent(data.ShortDescription);
                tinyMCE.get('FullDescription').setContent(data.FullDescription);
                $("#saveButton").val("Update");
                $("#SKU").focus();
            }
        });
        }



        $('#Email').blur(function () {
            var email = $("#Email").val();
            
            $.ajax({
                url: '@Url.Action("CheckDuplicateUser", "Admin")',
                type: "POST",
                data: JSON.stringify( { 'email': email }),
                contentType: "application/json; charset=utf-8",
                success: function (response) {
                    if (response == "false") {
                        $("#msg").remove();
                        $('<span id="msg" class="text-danger">Email Already exists</span>').insertAfter($("#Email"));
                        $("#Email").val('');
                    }
                    else {
                        $("#msg").remove();
                    }
                },
                error: function (jqXHR) {
                    alert(jqXHR.status + ":" + jqXHR.statusText);
                }
            });
        });
    </script>




}
