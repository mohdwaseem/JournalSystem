@model BAL.Models.ArticleModel
@{
    ViewBag.Title = "Articles Master";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="crumbs">
    <ul id="breadcrumbs" class="breadcrumb">
        <li><i class="icon-home"></i><a href="@Url.Action("Dashboard","Admin")">Dashboard</a> </li>
        <li class="current"><a href="pages" title="">Articles Master</a> </li>
    </ul>

</div>
<div class="page-header">
    <div class="page-title">
        <h3>
            Manage Articles
        </h3>

    </div>

</div>
<div class="row">

    <div class="col-md-12">
        <div class="widget box">
            <div class="widget-header">
                <h4>Add Article</h4>
            </div>
            <div class="widget-content">

                <input type="hidden" id="hdID" value="0" />
                <input type="hidden" id="pdfPathHidden" />
                <form enctype="multipart/form-data" class="form-horizontal" id="myForm" method="post">

                    @Html.AntiForgeryToken()
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.Label("Select Journal")
                        </label>
                        <div class="col-md-9">

                            @Html.DropDownList("JournalId", (IEnumerable<SelectListItem>)ViewBag.Journals, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.Label("Select Journal Issue")
                        </label>
                        <div class="col-md-9">

                            @Html.DropDownList("IssueId", new SelectList(Enumerable.Empty<SelectListItem>()), new { @class = "form-control" })
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.ArticleTitle) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.ArticleTitle, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.Authors) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.Authors, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.DOI) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.DOI, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.Description) <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.Description, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.Abstract)
                        </label>
                        <div class="col-md-9">
                            @Html.TextAreaFor(x => x.Abstract, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.PDFPath, "Select Pdf File") <span class="required">*</span>
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.PDFPath, new { @class = "form-control", @type = "file" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.FirstPage)
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.FirstPage, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.LastPage)
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.LastPage, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-group">
                        <label class="col-md-3 control-label">
                            @Html.LabelFor(x => x.Category)
                        </label>
                        <div class="col-md-9">
                            @Html.TextBoxFor(x => x.Category, new { @class = "form-control" })
                        </div>
                    </div>
                    <div class="form-actions">

                        <input type="button" ID="saveButton" value="Submit" class="btn btn-primary  col-md-offset-5" />
                        <input type="reset" ID="resetButton" onclick="ResetForm()" value="Clear" class="btn btn-inverse " />
                    </div>


                </form>



            </div>
        </div>
    </div>

</div>
<div class="row">
    <div class="col-md-12">
        <div class="widget box">
            <div class="widget-header">
                <h4>Journals List</h4>
            </div>
            <div class="widget-content">
                <table id="demoGrid" class="table table-striped table-bordered dt-responsive" cellspacing="0">
                    <thead>
                        <tr>
                            <th>ArticleId</th>
                            <th>JournalId</th>
                            <th>IssueId</th>
                            <th>ArticleTitle</th>
                            <th>Authors</th>
                            <th>Category</th>
                            <th>DOI</th>
                            <th>CreatedOn</th>
                            <th>Edit</th>
                            <th>Delete</th>
                        </tr>
                    </thead>
                </table>

            </div>
        </div>
    </div>
</div>

@section scripts{
    <link href="@Url.Content("~/Content/DataTables/css/jquery.dataTables.css")" rel="stylesheet" />
    <script src="@Url.Content("~/Scripts/DataTables/jquery.dataTables.js")"></script>
    <script src="@Url.Content("~/Scripts/tinymce/tinymce.js")"></script>
    <script>
    $('#saveButton').click(function () {
        if ($("#myForm").valid()) {
                   // Checking whether FormData is available in browser
                if (window.FormData !== undefined) {
                    NProgress.start();
                    var fileUpload = $("#PDFPath").get(0);
                    var files = fileUpload.files;
                    // Create FormData object
                    var fileData = new FormData();
                    // Looping over all files and add it to FormData object
                    for (var i = 0; i < files.length; i++) {
                        fileData.append(files[i].name, files[i]);
                    }
                    var form = $('#myForm')[0]; // You need to use standard javascript object here
                    var formData1 = new FormData(form);
                    formData1.append("actionTy", $("#saveButton").val());
                    formData1.append("ids", $("#hdID").val());
                    formData1.append("pdfs", $("#pdfPathHidden").val());
                    $.ajax({
                        url: '@Url.Action("ArticlesMaster", "Admin")',
                        type: "POST",
                        contentType: false, // Not to set any content header
                        processData: false, // Not to process data
                        data: formData1 ,
                        success: function (data) {
                            new Noty({
                                text: data,
                                type: 'success',
                                theme: 'metroui',
                                timeout: 2000
                            }).show();
                            NProgress.done();
                            ResetSelected();
                            oTable = $('#demoGrid').DataTable();
                            oTable.draw();
                            $("#saveButton").val("Submit");
                        },
                        error: function (jqXHR) {
                            new Noty({
                                text: jqXHR.status + ":" + jqXHR.statusText,
                                type: 'error',
                                theme: 'metroui',
                                timeout: 2000
                            }).show();
                        }
                    });
                }
                else {
                    new Noty({
                        text: 'Form data is not available',
                        type: 'error',
                        theme: 'metroui',
                        timeout: 2000
                    }).show();
                }
            }
            else {
                new Noty({
                    text: 'Please fill form',
                    type: 'error',
                    theme: 'metroui',
                    timeout: 2000
                }).show();
            }
        });
    $("#myForm").validate({
        rules: {


            ArticleTitle: "required",
            Authors:"required",
            PDFPath:"required"


        },
        messages: {
            ArticleTitle: "Please Enter article title",
            Authors: "Please enter authors information",
            PDFPath:"Please select pdf file"

        },
        errorPlacement: function (error, element) {
            // Add the `help-block` class to the error element
            error.addClass("help-block");

            if (element.prop("type") === "checkbox") {
                error.insertAfter(element.parent("label"));
            } else {
                error.insertAfter(element);
            }
        },
        highlight: function (element, errorClass, validClass) {
            $(element).parents(".col-md-9").addClass("has-error").removeClass("has-success");
        },
        unhighlight: function (element, errorClass, validClass) {
            $(element).parents(".col-md-9").addClass("has-success").removeClass("has-error");
        }

    });


    </script>

    <script>
        $(document).ready(function () {

            $("#SubCategoryList").select2();
        $("#demoGrid").DataTable({
            "processing": true, // for show progress bar
            "serverSide": true, // for process server side
            "filter": true, // this is for disable filter (search box)
            "orderMulti": false, // for disable multiple column at once
            "search": {
                "caseInsensitive": false
            },
            "pageLength": 10,
            "ajax": {
                "url": '@Url.Action("GetAllArticles", "Admin")',
                "type": "POST",
                "datatype": "json"
            },
            "columnDefs":
            [{
                "targets": [0],
                "visible": true,
                "searchable": false
            },



            {
                "targets": [8],
                "searchable": false,
                "orderable": false
            },
            {
                "targets": [9],
                "searchable": false,
                "orderable": false
            }],

            "columns": [
                { "data": "ArticleId", "name": "ArticleId", "autoWidth": true },
                { "data": "JournalId", "name": "JournalId", "autoWidth": true },
                { "data": "IssueId", "name": "IssueId", "autoWidth": true },
                { "data": "ArticleTitle", "name": "ArticleTitle", "autoWidth": true },
                { "data": "Authors", "name": "Authors", "autoWidth": true },
                { "data": "DOI", "name": "DOI", "autoWidth": true },
                { "data": "Category", "name": "Category", "autoWidth": true },
                {
                    "data": "CreatedOn", "name": "CreatedOn", "autoWidth": true,
                    "render": function (value) {
                        if (value === null) return "";
                        var pattern = /Date\(([^)]+)\)/;
                        var results = pattern.exec(value);
                        var dt = new Date(parseFloat(results[1]));
                        return (dt.getMonth() + 1) + "/" + dt.getDate() + "/" + dt.getFullYear();
                    }
                },
                {
                    "render": function (data, type, row) {
                        return '<a class="btn btn-info" onclick=EditFunction("' + row.ArticleId+'"); >Edit</a>';
                    }
                },
                {
                    data: null, render: function (data, type, row) {
                        return "<a href='#' class='btn btn-danger' onclick=DeleteData('" + row.ArticleId + "'); >Delete</a>";
                    }
                },
            ]

            });
        });
    </script>
    <script>
        function ResetForm() {
            $("#myForm")[0].reset();
            $("#saveButton").val("Submit");
        }

        function ResetSelected() {
            $("#ArticleTitle").val('');
            $("#Authors").val('');
            $("#Category").val('');
            $("#DOI").val('');
            $("#Abstract").val('');
            $("#FirstPage").val('');
            $("#LastPage").val('');

        }

        function DeleteData(ID) {
            if (confirm("Are you sure you want to delete ...?")) {
                Delete(ID);
            }
            else {
                return false;
            }
        }


        function Delete(ID) {
            var url = '@Url.Action("DeleteArticle", "Admin")';
            $.post(url, { id: ID }, function (data) {
                if (data == "Ok") {
                    new Noty({
                        text: 'Article Removed Successfully',
                        type: 'success',
                        theme: 'metroui',
                        timeout: 2000
                    }).show();
                    oTable = $('#demoGrid').DataTable();
                    oTable.draw();
                }
                else if (data == "No") {
                    new Noty({
                        text: 'Some Error Occured',
                        type: 'error',
                        theme: 'metroui',
                        timeout: 2000
                    }).show();
                }
                else {
                    new Noty({
                        text: data,
                        type: 'warning',
                        theme: 'metroui',
                        timeout: 2000
                    }).show();
                }
            });
        }

        function EditFunction(id) {
        $.ajax({
            data: JSON.stringify({ id: id }),
            url: '@Url.Action("GetArticle", "Admin")',
            contentType: "application/json; charset=utf-8",
            datatype: JSON,
            type:'POST',
            success: function (data) {
                $("#hdID").val(data[0].ArticleId);
                $("#JournalId").val(data[0].JournalId);
                InitializeIssues(data[0].JournalId, data[0].IssueId);
                $("#Authors").val(data[0].Authors);
                $("#ArticleTitle").val(data[0].ArticleTitle);
                $("#pdfPathHidden").val(data[0].PDFPath);
                $("#PDFPath").rules("remove");
                $("#saveButton").val("Update");
                $("#ArticleTitle").focus();
                tinyMCE.get('Abstract').setContent(data[0].Abstract);
              
                 
            },
            error: function (jqXHR) {
                alert(jqXHR.status + ":" + jqXHR.statusText);
            }
            
        });
        }

        
        function InitializeIssues(id,iss) {
            var ddlIssues = $("#IssueId");
            $.ajax({
                url: '@Url.Action("GetIssuesList", "Admin")',
                type: "GET",
                data: { 'id': id},
                contentType: "application/json; charset=utf-8",
                datatype: JSON,
                success: function (response) {
                    ddlIssues.empty().append('<option value="0">Please select</option>');
                    $.each(response, function () {
                        if (this['Value'] == iss) {
                            ddlIssues.append($("<option selected='selected'></option>").val(this['Value']).html(this['Text']));
                        }
                        else {
                            ddlIssues.append($("<option ></option>").val(this['Value']).html(this['Text']));
                        }
                    });
                },
                error: function (data) { }
            });

        }


        $('#JournalId').change(function () {
            var id = $("#JournalId").val();
            var ddlIssues = $("#IssueId");
            $.ajax({
                url: '@Url.Action("GetIssuesList", "Admin")',
                type: "GET",
                data: { 'id': id},
                contentType: "application/json; charset=utf-8",
                datatype: JSON,
                success: function (response) {
                    ddlIssues.empty().append('<option selected="selected" value="0">Please select</option>');
                    $.each(response, function () {
                        ddlIssues.append($("<option></option>").val(this['Value']).html(this['Text']));
                    });
                },
                error: function (data) { }
            });
        });
    </script>

     
    <script type="text/javascript">
        // Initialize your tinyMCE Editor with your preferred options
        tinymce.init({
            selector: 'textarea',
            height: 200,
            theme: 'modern',
            plugins: 'print preview fullpage searchreplace autolink directionality  visualblocks visualchars fullscreen image link media template codesample table charmap hr pagebreak nonbreaking anchor toc insertdatetime advlist lists textcolor wordcount   imagetools contextmenu colorpicker textpattern help',
            toolbar1: 'formatselect | bold italic strikethrough forecolor backcolor | link | alignleft aligncenter alignright alignjustify  | numlist bullist outdent indent  | removeformat'



        });
    </script>


}
